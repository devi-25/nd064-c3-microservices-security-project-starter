Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

Docker Client: 
Client compromise , Client authorization abuse, Dockerfile misconfiguration

Evaluating Docker Client Using STRIDE:
Spoofing - Client traffic from the Docker client to the Docker daemon or registry could be spoofed, or intercepted by a malicious party and replayed. Transport Layer Security (TLS) can be implemented to secure communication affecting the client.
Tampering - An attacker gets control of the Docker client. This could lead to tampering of the Dockerfile thatâ€™s used to build the image affecting Dockerfile.
Repudiation - Once the client is compromised, the attacker may use it to make changes that are not legitimate, which could impact the Dockerfile.
Information Disclosure - The client may expose sensitive information such as secrets that are hardcoded in configuration files that could impact the security of the Dockerfile.
Denial of Service - Excessive traffic from the client could overwhelm the daemon (often on the same machine) and could cause it to crash, leading to a client compromise.
Elevation of Privilege - when a Dockerfile does not specify a user, it defaults to executing the container using the root user, affecting client authorization and the Dockerfile.

Docker Host:
Isolation tampering, Use of --privilege flag, Insecure defaults, Misconfiguration

Evaluating Docker Host Using STRIDE:
Spoofing - This can occur when a sidecar container has intentional access to the primary container's namespace and may spoof the namespace used by the primary container, resulting in isolation tampering. You should be careful with using sidecar containers.
Tampering - Daemon configuration may be tampered with by a compromised client, leading to misconfiguration.
Repudiation - A user may make changes to the daemon that are not legitimate, leading to misconfiguration.
Information Disclosure - The Docker host file system may be misconfigured, exposing sensitive information and leading to insecure defaults.
Denial of Service - Daemon memory for the running container may be over-allocated, leading to a misconfiguration.
Elevation of Privilege - Daemon privilege may be escalated if a user name is not defined and the container runs as root, which gives access to any other container on the same host, leading to isolation tampering.

Docker Registry - the largest attack surface:
Image security, Open Source Software (OSS) security, Docker registry security




Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

Control plane - This is the lifeline of the Kubernetes API running many services. Internet access to both control planes and nodes should be disallowed to ensure your clusters are private.
Node runtime - This is the node runtime components including kube-proxy and kubelet on the worker node.
Cloud provider - This allows you to link your cluster into your cloud provider's API, and separates out the components that interact with that cloud platform from components that just interact with your cluster.

Evaluating Kubernetes Control Plane Using STRIDE:
This surface of Kubernetes is very vital to the system. The most important components are the API server and etcd, which handle all API calls to the server and store configuration values in etcd, the key-value store.
Spoofing - Calls to the API server could be spoofed by a malicious caller. This can be mitigated by ensuring all calls to the API server are over TLS, ensuring that anonymous and basic authentication is not used.
Tampering - The configuration of etcd may be tampered with by an attacker, modifying vital system-level configurations such as pod specs. This can be mitigated by restricting permissions on etcd files to 644 or more restrictive and that the pod spec file is set to root ownership.
Repudiation - Unauthorized changes may be made to the API server. This can be mitigated by making sure only trusted callers can authenticate to the API server by enforcing TLS.
Information Disclosure - Sensitive information may be exposed via the etcd key-value store. This can be mitigated by encrypting etcd content at rest and using TLS to access etcd only from the kube-apiserver. All other traffic should be rejected.
Denial of Service - excessive traffic to the API server can overwhelm the endpoint. kube-scheduler can incorrectly schedule the pod.
Elevation of Privilege - privilege can be abused by using the privileged flag. This should be avoided in all cases. This affects kube-apiserver.

Evaluating Kubernetes Node Runtime Using STRIDE:
Spoofing - The connection between the API server and kubelet can be spoofed. This can be mitigated by using kubelet uses strong encryption that does not have cryptographic flaws, strong TLS ciphers should be used.
Tampering - The kubelet configuration can be tampered with. Specifically, the kubelet.conf worker configuration file can be tampered with. Make sure to set the permission to 644 or more restrictive.
Repudiation - Unauthorized changes can be made to kubelet. To avoid this, kubelet authentication should be TLS and weak/ basic auth should not be allowed.
Information Disclosure - Kube-proxy can expose sensitive information. To ensure the kube-proxy does not expose information, the --kubeconfig should be set to permissions 644 or less permissive.
Denial of Service - Kubelet can be subject to denial of service. To protect the kernel from runtime overruns, set the --protect kernel defaults to true.
Elevation of Privilege - Kubelet can be subject to an elevation of privilege. To ensure privileges cannot be escalated, make sure the authorization mode argument is not set to always allow.


Example Aspects of STRIDE:
* Spoofing: Kubernetes comes with insecure defaults, such as all pods having CAP_NET_RAW permissions. This allows any pod to open raw sockets and inject malicious packets into the Kubernetes container network, potentially leading to spoofing.
* Repudiation: Kubernetes lacks native support for certificate revocation, potentially leading to repudiation if certificates cannot be revoked when necessary.
* Denial of Service: Kubernetes lacks an upper limit for setting the memory footprint, which may result in a denial of service by exhausting resources needed to run a pod.


Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

[FAIL] 1.1.5 Ensure auditing is configured for Docker files and directories - /var/lib/docker (Automated)
[FAIL] 1.1.6 Ensure auditing is configured for Docker files and directories - /etc/docker (Automated)
[FAIL] 1.1.10 Ensure auditing is configured for Docker files and directories - /etc/default/docker (Automated)
[FAIL] 1.1.13 Ensure auditing is configured for Docker files and directories - /etc/sysconfig/docker (Automated)
[FAIL] 4.5 Ensure Content trust for Docker is Enabled (Automated)

